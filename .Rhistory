?image
image(volcano)
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x, y)
?which.max
?mean
?plot
?rep
?segments
quit()
d <- dist(as.matrix(mtcars))
d
mtcars
as.matrix(mtcars)
?as.matrix
hc <- hclust(d)
hc
plot(hc)
?dist
?hclust
quit()
demo()
demo(nlm)
quit()
library(sp)
library(raster)
?library
library()
library(dismo)
quit()
install.packages("dismo")
install.packages("rasterVis")
install.packages("maptools")
install.packages("rgeos")
library(dismo)
gtmap <- gmap("Guatemala")
library(rgdal)
install.packages("rgdal")
gtmap <- gmap("Guatemala")
plot(gtmap)
gtmap <- gmap("Guatemala", type = "satellite")
plot(gtmap)
gtmap <- gmap("Guatemala", exp = 1)
plot(gtmap)
gtmap <- gmap("Guatemala", exp = 0.5)
plot(gtmap)
select.area <- drawExtent()
select.area <- drawExtent()
plot(gtmap)
select.area <- drawExtent()
gtmap <- gmap(select.area)
gtmap <- gmap(select.area)
plot(gtmap)
select.area <- drawExtent()
gtmap <- gmap(select.area)
plot(gtmap)
select.area <- drawExtent()
gtmap <- gmap(select.area)
plot(gtmap)
?gmap
install.packages("RgoogleMaps")
library(RgoogleMaps)
install.packages("googleVis")
library(googleVis)
data(Exports)
Geo <- gvisGeoMap(Exports, locationvar="Country", numvar="Profit",
options=list(height=400, dataMode='regions'))
Geo
class(Geo)
plot(Geo)
install.packages("rworldmap")
library(rworldmap)
vignette('rworldmap')
mapCountryData()
newmap <- getMap(resolution = "coarse")
plot(newmap)
mapGriddedData()
mapGriddedData(mapRegion = "america")
mapGriddedData(mapRegion = "central")
mapGriddedData(mapRegion = "central america")
mapGriddedData(mapRegion = "asia")
?dismo
library(dismo)
library()
laurus <- gbif("Laurus", "nobilis")
rm(Exports)
rm(GEo, gtmap, newmap, select.area)
rm(Geo)
locs <- data.frame(c("Guatemala1", "14.1", "-90.1"), c("Guatemala2", "14.5", "-90.5"))
locs
names(locs) <- c("country", "lat", "lon")
cnames(locs) <- c("country", "lat", "lon")
?names
class(locs)
names(locs)
?data.frame
rm(locs)
locs <- data.frame(c("Guatemala 1", "Guatemala 2"), c("14.1", "14.5"), c("-90.1", "-90.5"))
locs
names(locs) <- c("id", "lat", "lon")
locs
locs
?coordinates
coordinates(locs) <- c("lat", "lon")
class(locs)
summary(locs)
locs <- data.frame(c("Guatemala 1", "Guatemala 2"), c(14.1, 14.5), c(-90.1, -90.5))
locs
names(locs) <- c("id", "latitude", "longitude")
locs
coordinates(locs) <- c("lat", "lon")
coordinates(locs) <- c("latitude", "longitude")
locs
plot(locs)
plot(gmap("Guatemala"))
points(locs)
plot(locs)
distance(locs)
distance(locs)
summary(locs)
distance(locs)
distance(locs)
summary(locs)
crs.geo <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
crs.geo
class(crs.geo)
proj4string(locs) <- crs.geo
plot(locs, pch = 20, col = "steelblue")
library(rworldmap)
data("coastsCoarse")
data("countriesLow")
plot(coastsCoarse, add = T)
plot(coastsCoarse)
plot(countriesLow)
crs.geo <- CRS("+proj=longlat +ellps=GTM +datum=GM")
crs.geo <- CRS("+proj=longlat +ellps=GTM +datum=GTM")
?CRS
crs.geo <- CRS("+proj=longlat")
crs.geo
proj4string(locs) <- crs.geo
locs.gb.merc
locs
locs.merc <- Mercator(locs)
locs
locs <- data.frame(c("Guatemala 1", "Guatemala 2"), c(14.1, 14.5), c(-90.1, -90.5))
locs
names(locs) <- c("id", "lat", "lon")
locs
?coordinates
locs <- coordinates(c("lon", "lat"))
locs <- coordinates("lon", "lat")
coordinates(locs) <- c(lon", "lat"")
coordinates(locs) <- c(lon", "lat")
coordinates(locs) <- c("lon", "lat")
locs
crs.geo <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
proj4string(locs) <- crs.geo
summary(locs)
plot(locs, pch = 20, col = "steelblue")
data(coastsCoarse)
plot(coastsCoarse, add = T)
locs.merc <- Mercator(locs)
locs.merc
plot(gbmap)
gbmap <- gmap(locs)
plot(gbmap)
plot(locs.merc)
plot(gbmap)
points(locs.merc)
points(locs.merc, add = T)
points(locs.merc, pch = 20, col = "red")
distance(locs.merc)
class(locs.merc)
as.data.frame(coordinates(locs))
distance(as.data.frame(coordinates(locs)))
class(locs)
locs
coordinates(locs)
class(coordinates(locs))
class(as.data.frame(coordinates(locs)))
locs.merc
dist(locs)
dist(locs.merc)
dist(as.data.frame(locs)
)
dist(as.data.frame(locs))
Mercator(dist(as.data.frame(locs)))
hclust(dist(locs.merc))
?hclust
plot(hclust(dist(locs.merc)))
?hclust
?"dist"
?levelplot
install.packages("gstat", "geoR", "akima", "spdep")
install.packages("gstat")
?delete.response
library(maps)
?world
map('world', fill = TRUE, col = 1:10)
map('world', fill = TRUE, col = 1:1)
map('world', fill = TRUE, col = 1:100)
map('world', fill = TRUE, col = 1:20)
library(maptools)
rgeom()
?rgeom
?map.wrap
library()
?library
library(maptools, help)
library(help = maptools)
library(help = sp)
quit()
as.matrix(mtcars)
dist(as.matrix(mtcars))
hclust(dist(as.matrix(mtcars)))
plot(hclust(dist(as.matrix(mtcars))))
library(raster)
library(raster)
quit()
library(swirl)
swirl()
install.packages("knitr")
quit()
activity <- read.csv(unzip("activity.zip"))
setwd("~/datascience/reproducibleresearch/RepData_PeerAssessment1")
activity <- read.csv(unzip("activity.zip"))
str(activity)
activity$date <- as.Date(activity$date)
```{r echo=TRUE}
activity$date <- as.Date(activity$date)
stepsbyday <- aggregate(activity$steps, list(by=activity$date), FUN=sum, na.rm=F)
summary(stepsbyday)
hist(stepsbyday$steps, col="grey", main="Histogran of Steps", xlab="Steps/day")
names(stepsbyday) <- c("date", "steps")
summary(stepsbyday)
hist(stepsbyday$steps, col="grey", main="Histogran of Steps", xlab="Steps/day")
dev.copy(png, "figure/HistogramOfSteps.png")
dev.off()
stepsbyinterval <- aggregate(activity$steps, list(by=activity$interval), FUN=mean, na.rm=T)
names(stepsbyinterval) <- c("interval", "steps")
summary(stepsbyinterval)
plot(stepsbyinterval$interval, stepsbyinterval$steps, type="l", main="Steps by Interval", xlab="Interval", ylab="Steps", col="blue")
plot(stepsbyinterval$interval, stepsbyinterval$steps, type="l", main="Steps by Interval", xlab="Interval", ylab="Steps", col="blue")
meansteps <- mean(stepsbyinterval$steps)
maxinterval <- stepsbyinterval[stepsbyinterval$steps==max(stepsbyinterval$steps),]
abline(stepsbyinterval, h=meansteps, col="red")
abline(stepsbyinterval, v=maxinterval$interval, col="grey")
dev.copy(png, "figure/StepsByInterval.png")
dev.off()
maxinterval <- stepsbyinterval[stepsbyinterval$steps==max(stepsbyinterval$steps),]
head(activity)
head(stepsbyinterval)
class(stepsbyinterval)
stepsbyinterval[0,]
stepsbyinterval['0',]
stepsbyinterval['5',]
stepsbyinterval["5",]
stepsbyinterval[["5",]]
stepsbyinterval[[5,]]
stepsbyinterval[[5]]
stepsbyinterval[[5]]
stepsbyinterval[[5]]
stepsbyinterval[interval==5
]
stepsbyinterval[interval==5,]
stepsbyinterval[stepsbyinterval$interval==5,]
stepsbyinterval[stepsbyinterval$interval==5,]$steps
head(stepsbyday)
head(stepsbyinterval)
which(is.na(activity))
count(which(is.na(activity)))
is.na(activity)
na.exclude(activity)
head(na.exclude(activity))
is.na(activity)
head(is.na(activity))
head(activity)
?foreach
mactivity <- activity
mactivity[1]
mactivity[,1]
mactivity[1,1]
mactivity[1,2]
mactivity[1,3]
mactivity[1,4]
head(mactiviry)
head(mactivity)
mactivity[1,1]
mactivity[1,2]
mactivity[1,3]
mactivity[1,1:3]
mactivity[2,1:3]
mactivity[12,1:3]
mactivity[1,1:3]
for (act in mactivity){
act
}
act
rm(act)
for (act in mactivity) {
mactivity[act]
}
mactivity[1,1:3]
mactivity[1,1:3]
mactivity[1,"steps"]
mactivity[1,"interval"]
mactivity[1,"date"]
stepsbyinterval[stepsbyinterval$interval==5,"steps"]
stepsbyinterval[stepsbyinterval$interval==5,]$steps
mactivity[5,"interval"]
mactivity[6,"interval"]
mactivity <- activity
for (i in 1:nrow(mactivity)) {
if (is.na(mactivity[i,"steps"]) {
imputedsteps <- stepsbyinterval[stepsbyinterval==mactivity[i,"interval"],"steps"]
mactivity[i,"steps"] <- imputedsteps
}
}
mactivity <- activity
for (i in 1:nrow(mactivity)) {
if (is.na(mactivity[i,"steps"])) {
imputedsteps <- stepsbyinterval[stepsbyinterval==mactivity[i,"interval"],"steps"]
mactivity[i,"steps"] <- imputedsteps
}
}
rm(act)
imputedsteps <- stepsbyinterval[stepsbyinterval==mactivity[1,"interval"],"steps"]
imputedsteps
mactivity[1,"interval"]
stepsbyinterval[0]
stepsbyinterval[1]
mactivity <- activity
for (i in 1:nrow(mactivity)) {
if (is.na(mactivity[i,"steps"])) {
imputedsteps <- stepsbyinterval[stepsbyinterval$interval==mactivity[i,"interval"],"steps"]
mactivity[i,"steps"] <- imputedsteps
}
}
head(mactivity)
head(activity)
stepsbyinterval[1,1]
stepsbyinterval[1,2]
stepsbyinterval[2,2]
stepsbyinterval[1:6,2]
head(mactivity)
summary(mactivity)$mean
summary(mactivity)$Mean
sum(is.na(activity$steps))
```{r echo=TRUE}
mstepsbyday <- aggregate(mactivity$steps, list(by=mactivity$date), FUN=sum, na.rm=F)
names(mstepsbyday) <- c("date", "steps")
summary(mstepsbyday)
hist(mstepsbyday$steps, col="grey", main="Histogram of Steps (imputed data)", xlab="Steps/day")
```
```{r echo=FALSE, results="hide"}
dev.copy(png, "figure/mHistogramOfSteps.png")
dev.off()
```
mstepsbyday <- aggregate(mactivity$steps, list(by=mactivity$date), FUN=sum, na.rm=F)
date
summary(mstepsbyday)
summary(stepsbyday)
mean(stepsbyday$steps)
mean(stepsbyday$steps, na.rm=T)
median(stepsbyday$steps, na.rm=T)
plot(stepsbyday$date, stepsbyday$steps)
plot(mstepsbyday$date, mstepsbyday$steps)
mstepsbyday <- aggregate(mactivity$steps, list(by=mactivity$date), FUN=sum, na.rm=F)
names(mstepsbyday) <- c("date", "steps")
summary(mstepsbyday)
hist(mstepsbyday$steps, col="grey", main="Histogram of Steps (imputed data)", xlab="Steps/day")
plot(mstepsbyday$date, mstepsbyday$steps)
plot(stepsbyday$date, stepsbyday$steps)
summary(stepsbyday)
summary(mstepsbyday)
weekdays(mstepsbyday)
weekdays(mstepsbyday$steps)
weekdays(mstepsbyday$date)
class(weekdays(mstepsbyday$date))
format(mstepsbyday$date, "%w")
class(format(mstepsbyday$date, "%w"))
format(mstepsbyday$date, "%w")
factor(format(mstepsbyday$date, "%w"))
mstepsbyday$wd <- factor(format(mstepsbyday$date, "%w"))
head(mstepsbyday)
"1":"5"
class("1":"5")
?format
factor(format(mstepsbyday$date, "%d"))
format(mstepsbyday$date, "%d")
format(mstepsbyday$date, "%n")
format(mstepsbyday$date, "%d")
?ifelse
mstepsbyday$wd <- ifelse(format(mstepsbyday$date, "%w") %in% c("1":"5"),"Weekday", "Weekend")
head(mstepsbyday)
head(mstepsbyday, 10)
mstepsbyday$wd <- ifelse(format(mstepsbyday$date, "%w") %in% c("1":"5"),"weekday", "weekend")
?par
head(stepsbyinterval)
head(activity)
mactivity$wd <- ifelse(format(mactivity$date, "%w") %in% c("1":"5"),"weekday", "weekend")
head(mactivity)
par(mfrow=c(2,1))
plot(mactivity$interval, mactivity$steps)
par(mfrow=c(2,1))
with(subset(activity, wd="weekday"), plot(interval, steps, main="Weekday"))
with(subset(activity, wd="weekend"), plot(interval, steps, main="Weekend"))
par(mfrow=c(2,1))
with(subset(activity, wd="weekday"), plot(interval, steps, main="Weekday", type="l"))
with(subset(activity, wd="weekend"), plot(interval, steps, main="Weekend", type="l"))
par(mfrow=c(2,1))
with(subset(activity, wd="weekday"), plot(interval, mean(steps), main="Weekday", type="l"))
with(subset(activity, wd="weekend"), plot(interval, mean(steps), main="Weekend", type="l"))
par(mfrow=c(2,1))
with(subset(mactivity, wd="weekday"), plot(interval, mean(steps), main="Weekday", type="l"))
with(subset(mactivity, wd="weekend"), plot(interval, mean(steps), main="Weekend", type="l"))
par(mfrow=c(2,1))
with(subset(mactivity, wd="weekday"), plot(interval, steps, main="Weekday", type="l"))
with(subset(mactivity, wd="weekend"), plot(interval, steps, main="Weekend", type="l"))
plot(mactivity$interval, mactivity$steps)
plot(mactivity$interval, mean(mactivity$steps)
)
head(mactivity)
xyplot
library(lattice)
xyplot(mactivity$steps ~ mactivity$interval | mactivity$we)
xyplot(mactivity$steps ~ mactivity$interval | mactivity$wd)
?xyplot
xyplot(mactivity$steps ~ mactivity$interval | mactivity$wd, xlab="Interval", ylab="Steps")
head(mactivity)
?list
?aggregate
mstepsbyinterval <- aggregate(mactivity$steps, list(by=c(mactivity$interval,activity$wd), FUN=mean, na.rm=T)
)
mstepsbyinterval <- aggregate(mactivity$steps, list(by=c(mactivity$interval,activity$wd)), FUN=mean, na.rm=T)
head(mstepsbyinterval)
rm(mstepsbyinterval)
head(mstepsbyinterval)
head(mactivity)
mstepsbyinterval <- aggregate(mactivity$steps, list(mactivity$interval,activity$wd), FUN=mean, na.rm=T)
?aggregate
mstepsbyinterval <- aggregate(mactivity$steps, list(c(mactivity$interval,activity$wd)), FUN=mean, na.rm=T)
head(mstepsbyday)
head(mstepsbyinterval)
head(stepsbyinterval)
mstepsbyinterval <- aggregate(mactivity$steps, list(a=mactivity$interval,b=activity$wd), FUN=mean, na.rm=T)
mstepsbyinterval <- aggregate(mactivity$steps, list(a=mactivity$interval,b=mactivity$wd), FUN=mean, na.rm=T)
head(mstepsbyinterval)
mstepsbyinterval <- aggregate(mactivity$steps, list(a=mactivity$interval,b=mactivity$wd), FUN=mean, na.rm=T)
head(mstepsbyinterval)
names(mstepsbyinterval) <- c("interval", "wd", "steps")
head(mstepsbyinterval)
xyplot(mstepsbyinterval$steps ~ mstepsbyinterval$interval | mstepsbyinterval$wd, xlab="Interval", ylab="Steps")
par(mfrow=c(2,1))
with(subset(mstepsbyinterval, wd="weekday"), plot(interval, steps, main="Weekday", type="l"))
with(subset(mstepsbyinterval, wd="weekend"), plot(interval, steps, main="Weekend", type="l"))
par(mfrow=c(2,1))
with(subset(mstepsbyinterval, wd="weekday"), plot(interval, steps, main="Weekday", type="l"))
with(subset(mstepsbyinterval, wd="weekend"), plot(interval, steps, main="Weekend", type="l"))
par(mfrow=c(2,1))
with(subset(mstepsbyinterval, wd=="weekday"), plot(interval, steps, main="Weekday", type="l"))
with(subset(mstepsbyinterval, wd=="weekend"), plot(interval, steps, main="Weekend", type="l"))
par(mfrow=c(2,1))
with(subset(mstepsbyinterval, wd=="weekday"), plot(interval, steps, main="Weekday", type="l", col="blue"))
with(subset(mstepsbyinterval, wd=="weekend"), plot(interval, steps, main="Weekend", type="l", col="blue"))
mstepsbyinterval[1,1,1]
mstepsbyinterval[1,1]
mstepsbyinterval[1,2]
mstepsbyinterval[1,3]
mstepsbyinterval[1,"weekday"]
mstepsbyinterval[1,"wd"]
mstepsbyinterval[1,"wd"=="weekday"]
mstepsbyinterval[,"wd"=="weekday"]
mstepsbyinterval[,"weekday"]
mstepsbyinterval[,"wd"]
mstepsbyinterval[,"wd"]=="weekday"
head(mstepsbyinterval)
mstepsbyinterval[,mstepsbyinterval[,wd]=="weekday"]
mstepsbyinterval[,mstepsbyinterval[,"wd"]=="weekday"]
mstepsbyinterval["wd"]=="weekday"
weekday <- mstepsbyinterval["wd"]=="weekday"
weekday <- mstepsbyinterval[,"wd"]=="weekday"
weekday
mstepsbyinterval[,weekday]
mstepsbyinterval[,"weekday"]
mstepsbyinterval[weekday]
weekday <- mstepsbyinterval["wd"]=="weekday"
mstepsbyinterval[weekday]
mstepsbyinterval[,weekday]
rm(weekday)
subset(mstepsbyinterval, wd="weekday")
subset(mstepsbyinterval, wd="weekday")$steps
mean(subset(mstepsbyinterval, wd="weekday")$steps)
par(mfrow=c(2,1))
with(subset(mstepsbyinterval, wd=="weekday"), plot(interval, steps, main="Weekday", type="l", col="blue"))
abline(mstepsbyinterval, h=mean(subset(mstepsbyinterval, wd="weekday")$steps), col="red")
with(subset(mstepsbyinterval, wd=="weekend"), plot(interval, steps, main="Weekend", type="l", col="blue"))
abline(mstepsbyinterval, h=mean(subset(mstepsbyinterval, wd="weekend")$steps), col="red")
?plot
?par
head(activity)
tail(activity)
head(activity, 50)
par(mfrow=c(1,2))
with(subset(mstepsbyinterval, wd=="weekday"), plot(interval, steps, main="Weekday", type="l", col="blue", ylim = c(0,230)))
abline(mstepsbyinterval, h=mean(subset(mstepsbyinterval, wd="weekday")$steps), col="red")
with(subset(mstepsbyinterval, wd=="weekend"), plot(interval, steps, main="Weekend", type="l", col="blue", ylim = c(0,230)))
abline(mstepsbyinterval, h=mean(subset(mstepsbyinterval, wd="weekend")$steps), col="red")
dev.copy(png, "figure/weekdayvsweekend.png")
dev.off()
quit()

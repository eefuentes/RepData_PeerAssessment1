g
plot(x,y)
plot(x, y, type="n")
points(x[g == "Male"], y[g == "Male"], col = "green")
points(x[g == "Female"], y[g == "Female"], col = "blue")
points(x[g == "Female"], y[g == "Female"], col = "blue", pch = 19)
windows()
x11()
dev.cur()
dev.set(1)
dev.set(2)
dev.set(3)
dev.set(4)
dev.set(2)
dev.off()
quit()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
airquality
summary(airquality)
head(airquality)
class(airquality)
class(airquality$Month)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality)
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(1, 5))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
set.seed(10)
x <- rnorm(100)
x
plot(x)
hist(x)
plot(x)
f <- rep(0:1, each = 50)
f
class(f)
y <- x + f - f * x + rnorm(100, sd = 0.5)
y
plot(y)
hist(y)
f <- factor(f, labels = c("Group 1",""))
f <- factor(f, labels = c("Group 1","Group 2"))
f
xyplot(y ~ x, | f, layout=c(2,1))
xyplot(y ~ x | f, layout=c(2,1))
?panel
panel.violin(x,y)
quit()
install.packages("ggplot2")
quit()
library(datasets)
airquality
qplot
qplot()
library(ggplot2)
qplot()
qplot(airquality)
qplot(airquality$Ozone)
qplot(y = airquality$Ozone, airquality$Wind)
qplot(y = airquality$Ozone, x = airquality$Wind)
qplot(airquality$Ozone, airquality$Wind)
ggplot()
?qplot()
?ggplot()
str(airquality)
?datasets
library(help = "datasets")
Titanic
str(Titanic)
volcano
str(volcano)
str(mpg)
str(mtcars)
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), color = drv)
qplot(hwy, data = mpg)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(displ, hwy, data = mpg, facets = drv)
qplot(displ, hwy, data = mpg, facets = .drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(displ, hwy, data = mpg, facets = drv ~ .)
qplot(displ, hwy, data = mpg, facets = drv ~ dislp)
qplot(displ, hwy, data = mpg, facets = drv ~ displ)
qplot(displ, hwy, data = mpg, facets = drv ~ .)
qplot(hwy, data = mpg, facets = drv ~ .)
qplot(displ, hwy, data = mpg, facets = drv ~ .)
qplot(displ, hwy, data = mpg, facets = drv ~ ., geom = density)
density()
qplot(displ, hwy, data = mpg, facets = drv ~ ., geom = "density)
)
""
)
qplot(displ, hwy, data = mpg, facets = drv ~ ., geom = "density")
library(nlme)
library(lattice)
?nlme
xyplot(weight ~ Time | Diet, BodyWeight)
?axis
?lpoints
?trellis.par.set
?splom
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(datasets)
data("airquality")
?data
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
?aes
print(g)
qplot(votes, rating, data = movies)
data(movies)
data("movies")
?geom_smooth
?qplot
?panel.loess
?qplot
qplot(mpg, wt, data=mtcars)
qplot(mpg, wt, data=mtcars, smooth = "loess")
qplot(mpg, wt, data=mtcars, panel = panel.loess)
qplot(mpg, wt, data=mtcars) + geom_smooth()
qplot(mpg, wt, data=mtcars) + stats_smooth("loess")
qplot(mpg, wt, data=mtcars) + geom_smooth()
?panel_lmline()
?panel.lmline()
?ggplot
g <- ggplot(movies, aes(votes, rating))
quit()
quit()
topo.colors()
colors()
library(grDevices)
colorRamp()
?colorRamp
?image
image(volcano)
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x, y)
?which.max
?mean
?plot
?rep
?segments
quit()
d <- dist(as.matrix(mtcars))
d
mtcars
as.matrix(mtcars)
?as.matrix
hc <- hclust(d)
hc
plot(hc)
?dist
?hclust
quit()
demo()
demo(nlm)
quit()
library(sp)
library(raster)
?library
library()
library(dismo)
quit()
install.packages("dismo")
install.packages("rasterVis")
install.packages("maptools")
install.packages("rgeos")
library(dismo)
gtmap <- gmap("Guatemala")
library(rgdal)
install.packages("rgdal")
gtmap <- gmap("Guatemala")
plot(gtmap)
gtmap <- gmap("Guatemala", type = "satellite")
plot(gtmap)
gtmap <- gmap("Guatemala", exp = 1)
plot(gtmap)
gtmap <- gmap("Guatemala", exp = 0.5)
plot(gtmap)
select.area <- drawExtent()
select.area <- drawExtent()
plot(gtmap)
select.area <- drawExtent()
gtmap <- gmap(select.area)
gtmap <- gmap(select.area)
plot(gtmap)
select.area <- drawExtent()
gtmap <- gmap(select.area)
plot(gtmap)
select.area <- drawExtent()
gtmap <- gmap(select.area)
plot(gtmap)
?gmap
install.packages("RgoogleMaps")
library(RgoogleMaps)
install.packages("googleVis")
library(googleVis)
data(Exports)
Geo <- gvisGeoMap(Exports, locationvar="Country", numvar="Profit",
options=list(height=400, dataMode='regions'))
Geo
class(Geo)
plot(Geo)
install.packages("rworldmap")
library(rworldmap)
vignette('rworldmap')
mapCountryData()
newmap <- getMap(resolution = "coarse")
plot(newmap)
mapGriddedData()
mapGriddedData(mapRegion = "america")
mapGriddedData(mapRegion = "central")
mapGriddedData(mapRegion = "central america")
mapGriddedData(mapRegion = "asia")
?dismo
library(dismo)
library()
laurus <- gbif("Laurus", "nobilis")
rm(Exports)
rm(GEo, gtmap, newmap, select.area)
rm(Geo)
locs <- data.frame(c("Guatemala1", "14.1", "-90.1"), c("Guatemala2", "14.5", "-90.5"))
locs
names(locs) <- c("country", "lat", "lon")
cnames(locs) <- c("country", "lat", "lon")
?names
class(locs)
names(locs)
?data.frame
rm(locs)
locs <- data.frame(c("Guatemala 1", "Guatemala 2"), c("14.1", "14.5"), c("-90.1", "-90.5"))
locs
names(locs) <- c("id", "lat", "lon")
locs
locs
?coordinates
coordinates(locs) <- c("lat", "lon")
class(locs)
summary(locs)
locs <- data.frame(c("Guatemala 1", "Guatemala 2"), c(14.1, 14.5), c(-90.1, -90.5))
locs
names(locs) <- c("id", "latitude", "longitude")
locs
coordinates(locs) <- c("lat", "lon")
coordinates(locs) <- c("latitude", "longitude")
locs
plot(locs)
plot(gmap("Guatemala"))
points(locs)
plot(locs)
distance(locs)
distance(locs)
summary(locs)
distance(locs)
distance(locs)
summary(locs)
crs.geo <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
crs.geo
class(crs.geo)
proj4string(locs) <- crs.geo
plot(locs, pch = 20, col = "steelblue")
library(rworldmap)
data("coastsCoarse")
data("countriesLow")
plot(coastsCoarse, add = T)
plot(coastsCoarse)
plot(countriesLow)
crs.geo <- CRS("+proj=longlat +ellps=GTM +datum=GM")
crs.geo <- CRS("+proj=longlat +ellps=GTM +datum=GTM")
?CRS
crs.geo <- CRS("+proj=longlat")
crs.geo
proj4string(locs) <- crs.geo
locs.gb.merc
locs
locs.merc <- Mercator(locs)
locs
locs <- data.frame(c("Guatemala 1", "Guatemala 2"), c(14.1, 14.5), c(-90.1, -90.5))
locs
names(locs) <- c("id", "lat", "lon")
locs
?coordinates
locs <- coordinates(c("lon", "lat"))
locs <- coordinates("lon", "lat")
coordinates(locs) <- c(lon", "lat"")
coordinates(locs) <- c(lon", "lat")
coordinates(locs) <- c("lon", "lat")
locs
crs.geo <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
proj4string(locs) <- crs.geo
summary(locs)
plot(locs, pch = 20, col = "steelblue")
data(coastsCoarse)
plot(coastsCoarse, add = T)
locs.merc <- Mercator(locs)
locs.merc
plot(gbmap)
gbmap <- gmap(locs)
plot(gbmap)
plot(locs.merc)
plot(gbmap)
points(locs.merc)
points(locs.merc, add = T)
points(locs.merc, pch = 20, col = "red")
distance(locs.merc)
class(locs.merc)
as.data.frame(coordinates(locs))
distance(as.data.frame(coordinates(locs)))
class(locs)
locs
coordinates(locs)
class(coordinates(locs))
class(as.data.frame(coordinates(locs)))
locs.merc
dist(locs)
dist(locs.merc)
dist(as.data.frame(locs)
)
dist(as.data.frame(locs))
Mercator(dist(as.data.frame(locs)))
hclust(dist(locs.merc))
?hclust
plot(hclust(dist(locs.merc)))
?hclust
?"dist"
?levelplot
install.packages("gstat", "geoR", "akima", "spdep")
install.packages("gstat")
?delete.response
library(maps)
?world
map('world', fill = TRUE, col = 1:10)
map('world', fill = TRUE, col = 1:1)
map('world', fill = TRUE, col = 1:100)
map('world', fill = TRUE, col = 1:20)
library(maptools)
rgeom()
?rgeom
?map.wrap
library()
?library
library(maptools, help)
library(help = maptools)
library(help = sp)
quit()
as.matrix(mtcars)
dist(as.matrix(mtcars))
hclust(dist(as.matrix(mtcars)))
plot(hclust(dist(as.matrix(mtcars))))
library(raster)
library(raster)
quit()
library(swirl)
swirl()
install.packages("knitr")
quit()
setwd("~/datascience/reproducibleresearch/RepData_PeerAssessment1")
activity <- read.csv(unzip("activity.zip"))
str(activity)
summary(activity)
activity$date <- as.Date(activity$date)
```
***
## What is mean total number of steps taken per day?
We start summarizing the steps per day with the following code:
```{r echo=TRUE}
stepsbyday <- aggregate(activity$steps, list(by=activity$date), FUN=sum, na.rm=F)
names(stepsbyday) <- c("date", "steps")
summary(stepsbyday)
```
```{r echo=FALSE, results="hide", fig.show=FALSE}
hist(stepsbyday$steps, col="grey", main="Histogram of Steps", xlab="Steps/day")
dev.copy(png, "figure/HistogramOfSteps.png")
dev.off()
```
![Histogram of Steps](figure/HistogramOfSteps.png)
Total steps by day has is has a normal distribution with a **Mean of `r mean(stepsbyday$steps, na.rm=T)` and a Median of `r median(stepsbyday$steps, na.rm=T)` steps/day**.
***
## What is the average daily activity pattern?
To analyze the daily activity pattern we aggregate the steps by interval, and compute the mean as follows:
```{r echo=TRUE}
stepsbyinterval <- aggregate(activity$steps, list(by=activity$interval), FUN=mean, na.rm=T)
names(stepsbyinterval) <- c("interval", "steps")
summary(stepsbyinterval)
```
```{r echo=FALSE, results="hide"}
plot(stepsbyinterval$interval, stepsbyinterval$steps, type="l", main="Steps by Interval", xlab="Interval", ylab="Steps", col="blue")
meansteps <- mean(stepsbyinterval$steps)
maxinterval <- stepsbyinterval[stepsbyinterval$steps==max(stepsbyinterval$steps),]
abline(stepsbyinterval, h=meansteps, col="red")
abline(stepsbyinterval, v=maxinterval$interval, col="grey")
dev.copy(png, "figure/StepsByInterval.png")
dev.off()
```
![Steps by Interval](figure/StepsByInterval.png)
The average steps in a 5 minute interval is `r meansteps`.
The maximum average number of steps in a 5 minute interval is `r maxinterval$steps`, and it's done on the interval `r maxinterval$interval`.
***
## Imputing missing values
In the **activity** data frame there are `r sum(is.na(activity$steps))` missing values.
We will create a new **mactivity** from **activity** data.frame in order to impute missing values. We will use the average steps per interval.
```{r echo=TRUE}
mactivity <- activity
for (i in 1:nrow(mactivity)) {
if (is.na(mactivity[i,"steps"])) {
imputedsteps <- stepsbyinterval[stepsbyinterval$interval==mactivity[i,"interval"],"steps"]
mactivity[i,"steps"] <- imputedsteps
}
}
```
The following code summarizes the steps per day and create a new histogram with the new imputed data.
```{r echo=TRUE}
mstepsbyday <- aggregate(mactivity$steps, list(by=mactivity$date), FUN=sum, na.rm=F)
names(mstepsbyday) <- c("date", "steps")
summary(mstepsbyday)
```
```{r echo=FALSE, results="hide"}
hist(mstepsbyday$steps, col="grey", main="Histogram of Steps (imputed data)", xlab="Steps/day")
dev.copy(png, "figure/mHistogramOfSteps.png")
dev.off()
```
![Histogram of Steps (imputed data)](figure/mHistogramOfSteps.png)
The **Mean is `r mean(mstepsbyday$steps, na.rm=T)` steps and the Median is `r median(mstepsbyday$steps, na.rm=T)` steps/day**.
The median and mean do not vary from the numbers estimated before imputing the missing values. So there is no major impact on imputing missing values.
***
## Are there differences in activity patterns between weekdays and weekends?
To compare steps in weekends with weekdays a factor variable **wd** is needed in the **mactivity** data frame.
```{r echo=TRUE}
mactivity$wd <- ifelse(format(mactivity$date, "%w") %in% c("1":"5"),"weekday", "weekend")
```
Next we need to group by **interval** and **wd** and calculate the mean.  The result is in **mstepsbyinterval**
```{r echo=TRUE}
mstepsbyinterval <- aggregate(mactivity$steps, list(a=mactivity$interval,b=mactivity$wd), FUN=mean, na.rm=T)
names(mstepsbyinterval) <- c("interval", "wd", "steps")
```
Now we can do the plot to compare activity between weekdays and weekend.
```{r echo=FALSE, results="hide"}
par(mfrow=c(1,2))
with(subset(mstepsbyinterval, wd=="weekday"), plot(interval, steps, main="Weekday", type="l", col="blue", ylim = c(0,230)))
abline(mstepsbyinterval, h=mean(subset(mstepsbyinterval, wd="weekday")$steps), col="red")
with(subset(mstepsbyinterval, wd=="weekend"), plot(interval, steps, main="Weekend", type="l", col="blue", ylim = c(0,230)))
abline(mstepsbyinterval, h=mean(subset(mstepsbyinterval, wd="weekend")$steps), col="red")
```
```{r echo=FALSE, results="hide"}
dev.copy(png, "figure/weekdayvsweekend.png")
dev.off()
```
![Steps on Weekdays vs Weekend](figure/weekdayvsweekend.png)
The mean steps per interval (`r mean(subset(mstepsbyinterval, wd="weekday")$steps)`) seems to be the same all days. What varies is the distribution along the days. On weekdays the activity has a peak between 5am and 10am. Activity seems to start earlier than on weekends (5am). On weekends activity is evenly distributed along the day.
***
activity <- read.csv(unzip("activity.zip"))
activity$date <- as.Date(activity$date)
stepsbyday <- aggregate(activity$steps, list(by=activity$date), FUN=sum, na.rm=F)
names(stepsbyday) <- c("date", "steps")
summary(stepsbyday)
hist(stepsbyday$steps, col="grey", main="Histogram of Steps", xlab="Steps/day")
dev.copy(png, "figure/HistogramOfSteps.png")
dev.off()
par(mfrow=c(1,1))
hist(stepsbyday$steps, col="grey", main="Histogram of Steps", xlab="Steps/day")
dev.copy(png, "figure/HistogramOfSteps.png")
dev.off()
stepsbyinterval <- aggregate(activity$steps, list(by=activity$interval), FUN=mean, na.rm=T)
names(stepsbyinterval) <- c("interval", "steps")
summary(stepsbyinterval)
plot(stepsbyinterval$interval, stepsbyinterval$steps, type="l", main="Steps by Interval", xlab="Interval", ylab="Steps", col="blue")
meansteps <- mean(stepsbyinterval$steps)
maxinterval <- stepsbyinterval[stepsbyinterval$steps==max(stepsbyinterval$steps),]
abline(stepsbyinterval, h=meansteps, col="red")
abline(stepsbyinterval, v=maxinterval$interval, col="grey")
dev.copy(png, "figure/StepsByInterval.png")
dev.off()
mactivity <- activity
for (i in 1:nrow(mactivity)) {
if (is.na(mactivity[i,"steps"])) {
imputedsteps <- stepsbyinterval[stepsbyinterval$interval==mactivity[i,"interval"],"steps"]
mactivity[i,"steps"] <- imputedsteps
}
}
mstepsbyday <- aggregate(mactivity$steps, list(by=mactivity$date), FUN=sum, na.rm=F)
names(mstepsbyday) <- c("date", "steps")
summary(mstepsbyday)
hist(mstepsbyday$steps, col="grey", main="Histogram of Steps (imputed data)", xlab="Steps/day")
dev.copy(png, "figure/mHistogramOfSteps.png")
dev.off()
mactivity$wd <- ifelse(format(mactivity$date, "%w") %in% c("1":"5"),"weekday", "weekend")
mstepsbyinterval <- aggregate(mactivity$steps, list(a=mactivity$interval,b=mactivity$wd), FUN=mean, na.rm=T)
names(mstepsbyinterval) <- c("interval", "wd", "steps")
par(mfrow=c(1,2))
with(subset(mstepsbyinterval, wd=="weekday"), plot(interval, steps, main="Weekday", type="l", col="blue", ylim = c(0,230)))
abline(mstepsbyinterval, h=mean(subset(mstepsbyinterval, wd="weekday")$steps), col="red")
with(subset(mstepsbyinterval, wd=="weekend"), plot(interval, steps, main="Weekend", type="l", col="blue", ylim = c(0,230)))
abline(mstepsbyinterval, h=mean(subset(mstepsbyinterval, wd="weekend")$steps), col="red")
dev.copy(png, "figure/weekdayvsweekend.png")
dev.off()
dev.cur()
dev.set(1)
dev.set(2)
dev.set(3)
